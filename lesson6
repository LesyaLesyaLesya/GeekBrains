// lesson6.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <iomanip>
#include <set>


using namespace std;

bool check_int(const char* inputValue)
{
    set<char> s1{ '1', '2', '3', '4','5', '6', '7', '8', '9', '0' };

    int i{ 0 };

    while (inputValue[i] != '\0')
    {
        if (s1.find(inputValue[i]) == s1.end())
        {
            
            return false;
        }
        i++;
    }

    return true;
}
void Zadanie1()
{
    /*--------------------------------------------------
    *Создать программу, которая считывает целое число типа int. И поставить «защиту от дурака»:
    если пользователь вводит что-то кроме одного целочисленного значения, нужно вывести сообщение об ошибке и предложить ввести число еще раз.
    Пример неправильных введенных строк:
        rbtrb
        nj34njkn
        1n
     ----------------------------------------------------*/
    bool correct{ false };
    char inputValue[256];

    while (!correct)
    {
        cout << "Введите число типа int" << std::endl;

        
        cin >> setw(256) >> inputValue;

        if (check_int(inputValue) == false)
        {
            cout << "Некорректный ввод ...";
            cin.clear();
            cin.ignore(32767, '\n');

        }
        else
        {
            correct = true ;

        }

    }
   
    int ivaluse = atoi(inputValue);
    cout << "Все успешно ...";
};

class myOStream 
{
public:
    //создаем шаблон функции
    template <typename T>
    myOStream& operator<<(const T& x)
    {
        cout << x;
        return *this;
    }


    typedef myOStream& (*MyStreamManipulator) (myOStream&); 

    //перешружаем оператор << - принимает указатель на функцию
    myOStream& operator<<(MyStreamManipulator manip)
    {
        return manip(*this);
    }

    //реализую endl как статический член класса myOStream
    static myOStream& endl(myOStream& stream)
    {
        //один перевод строки выводим, второй перевод строки и очистка буфера - из стандартного std::endl
        cout << '\n' << std::endl; 
   
        return stream;
    }

};

void Zadanie2()
{
    /*--------------------------------------------------
    Создать собственный манипулятор endll для стандартного потока вывода, который выводит два перевода строки и сбрасывает буфер.
     ----------------------------------------------------*/
    myOStream stream;
    stream << "Проверка...";

    stream << myOStream::endl;

    stream << "Проверка...";
    //stream << std::endl;
};

void Zadanie3()
{
    /*--------------------------------------------------

     ----------------------------------------------------*/

};

void Zadanie4()
{
    /*--------------------------------------------------

     ----------------------------------------------------*/

};

void Zadanie5()
{
    /*--------------------------------------------------

     ----------------------------------------------------*/

};

int main()
{
    setlocale(LC_ALL, "Russian");

    std::cout << "Введите номер задания цифрой" << std::endl;
    unsigned short nomerZadania;

    std::cin >> nomerZadania;

    if (std::cin.fail())
    {
        std::cout << "Некорректный ввод номера задания...";
        std::cin.clear();
        std::cin.ignore(32767, '\n');
    }
    else
    {
        switch (nomerZadania)
        {
        case 1:Zadanie1(); break;

        case 2:Zadanie2(); break;

        case 3:Zadanie3(); break;

        case 4:Zadanie4(); break;

        case 5:Zadanie5(); break;

        default: break;
        }
    }
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
